Codigo que puedo necesitas mas adelante:


    ////////////////////////////////////////////////////////////////////////////
    //                            CLASSE PRIVADA                              //
    ////////////////////////////////////////////////////////////////////////////

    private class SubMatriu {
        private double[][] data;
        private int tamany;
        private int filaInici;
        private int columnaInici;

        public SubMatriu(double[][] data, int filaInici, int columnaInici, int tamany) {
            this.data = data;
            this.tamany = tamany;
            this.filaInici = filaInici;
            this.columnaInici = columnaInici;
        }

        public Matriu sumar(SubMatriu b) {
            double[][] c = new double[this.tamany][this.tamany];
            for (int i = 0; i < this.tamany; i++) {
                for (int j = 0; j < this.tamany; j++) {
                    c[i][j] = this.data[filaInici+i][columnaInici+j] +
                            b.data[b.filaInici+i][b.columnaInici+j];
                }
            }

            Matriu m = new Matriu(this.tamany, this.tamany);
            m.set_data(c);
            return m;
        }

        public Matriu restar(SubMatriu b) {
            double[][] c = new double[this.tamany][this.tamany];
            for (int i = 0; i < this.tamany; i++) {
                for (int j = 0; j < this.tamany; j++) {
                    c[i][j] = this.data[filaInici+i][columnaInici+j] -
                            b.data[b.filaInici+i][b.columnaInici+j];
                }
            }

            Matriu m = new Matriu(this.tamany, this.tamany);
            m.set_data(c);
            return m;
        }

        public Matriu toMatriu() {
            double[][] c = new double[this.tamany][this.tamany];
            for (int i = 0; i < this.tamany; i++) {
                for (int j = 0; j < this.tamany; j++) {
                    c[i][j] = this.data[filaInici+i][columnaInici+j];
                }
            }

            Matriu m = new Matriu(this.tamany, this.tamany);
            m.set_data(c);
            return m;
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //                          FUNCIONS PRIVADES                             //
    ////////////////////////////////////////////////////////////////////////////

    private Matriu strassen(Matriu a, Matriu b) {
        int n = a.data.length;
        if (n <= 128) {
            return a.multiplicar(b);
        }

        n = n/2;
        SubMatriu matriu_a11 = new SubMatriu(a.data, 0, 0, n);
        SubMatriu matriu_a12 = new SubMatriu(a.data, 0, n, n);
        SubMatriu matriu_a21 = new SubMatriu(a.data, n, 0, n);
        SubMatriu matriu_a22 = new SubMatriu(a.data, n, n, n);

        SubMatriu matriu_b11 = new SubMatriu(b.data, 0, 0, n);
        SubMatriu matriu_b12 = new SubMatriu(b.data, 0, n, n);
        SubMatriu matriu_b21 = new SubMatriu(b.data, n, 0, n);
        SubMatriu matriu_b22 = new SubMatriu(b.data, n, n, n);


        Matriu m1 = strassen((matriu_a11.sumar(matriu_a22)), (matriu_b11.sumar(matriu_b22)));
        Matriu m2 = strassen((matriu_a21.sumar(matriu_a22)), matriu_b11.toMatriu());
        Matriu m3 = strassen(matriu_a11.toMatriu(), (matriu_b12.restar(matriu_b22)));
        Matriu m4 = strassen(matriu_a22.toMatriu(), (matriu_b21.restar(matriu_b11)));
        Matriu m5 = strassen((matriu_a11.sumar(matriu_a12)), matriu_b22.toMatriu());
        Matriu m6 = strassen((matriu_a21.restar(matriu_a11)), (matriu_b11.sumar(matriu_b12)));
        Matriu m7 = strassen((matriu_a12.restar(matriu_a22)), (matriu_b21.sumar(matriu_b22)));

        Matriu matriu_c11 = m1.sumar(m4).restar(m5).sumar(m7);
        Matriu matriu_c12 = m3.sumar(m5);
        Matriu matriu_c21 = m2.sumar(m4);
        Matriu matriu_c22 = m1.restar(m2).sumar(m3).sumar(m6);

        Matriu c = new Matriu(n*2, n*2);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                c.data[i][j] = matriu_c11.data[i][j];
                c.data[i][n+j] = matriu_c12.data[i][j];
                c.data[n+i][j] = matriu_c21.data[i][j];
                c.data[n+i][n+j] = matriu_c22.data[i][j];
            }
        }

        return c;
    }

    private Matriu convertir_a_matriu_quadrada() {
        int tamany = this.data.length;
        if (tamany < this.data[0].length) tamany = this.data[0].length;
        Matriu matriu_quadrada = new Matriu(tamany, tamany);
        matriu_quadrada.set_data(this.data);

        for (int i = tamany; i < this.data.length; i++) {
            for (int j = 0; j < this.data.length; j++) {
                matriu_quadrada.data[i][j] = 0;
            }
        }

        for (int i = tamany; i < this.data[0].length; i++) {
            for (int j = 0; j < this.data.length; j++) {
                matriu_quadrada.data[j][i] = 0;
            }
        }

        return matriu_quadrada;
    }

    // Pre:  Anomanem la matriu implícita com A i la matriu pasada per referència
    //		 com B, B != NULL,  A té que estar inicialitzada. El nombre files de
    //		 la Matriu A té que ser igual al nombre de columnes de la Matriu B.
    // Post: Retorna una matriu C com a resultat de multiplicar la matriu
    //		 implícita (A) amb la matriu B. C = A * B.
    // Cost: O(n^2,807).
    public Matriu multiplicar_strassen(Matriu b) {
        Matriu a_quadrada = this.convertir_a_matriu_quadrada();
        Matriu b_quadrada = b.convertir_a_matriu_quadrada();
        return strassen(a_quadrada, b_quadrada);
    }
